---
runcmd:
  # This bit of bash just creates the necessary directories and makes
  # them owned by the same user as the file that is created in the
  # next step.  write_files will create the directories for you, but
  # the owner is left as root.
  #
  # Note that we could probably leave out the mkdir command since
  # write-files will run before runcmd:
  # https://git.launchpad.net/cloud-init/tree/config/cloud.cfg.tmpl
  #
  # I'd like to use some bash shell parameter expansion here (see
  # https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html,
  # for example) to extract the directory from the path, but
  # Terraform's templating engine balks at that; hence, I am using
  # dirname instead.
  - [bash, -c, "p=${path}; d=$(dirname $p); mkdir -p $d; chown -R ${owner} $d;"]

write_files:
  # Create a file that can be used to configure the AWS CLI to assume
  # a specified role by default, as well as other roles.  For details,
  # see
  # https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html#using-a-configuration-file
  - content: |
      [default]
      credential_source = Ec2InstanceMetadata
      region = ${aws_region}
      role_arn = ${terraformer_role_arn}
      sts_regional_endpoints = regional

      [read_cool_assessment_terraform_state]
      credential_source = Ec2InstanceMetadata
      region = ${aws_region}
      role_arn = ${read_cool_assessment_terraform_state_role_arn}
      sts_regional_endpoints = regional

      [read_organization_information]
      credential_source = Ec2InstanceMetadata
      region = ${aws_region}
      role_arn = ${organization_read_role_arn}
      sts_regional_endpoints = regional
    owner: ${owner}
    path: ${path}
    permissions: ${permissions}
